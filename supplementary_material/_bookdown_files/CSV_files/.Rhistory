main="Population density relative to resouce level")
abline(coef1.estimated, intercept1.estimated)
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
abline(coef1.estimated, intercept1.estimated)
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
?abline
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
# fit the ANCOVA model
fit = lm(density~resource*reg)
# show the design matrix
model.matrix(fit)
# show parameter estimates & their confidence intervals
summary(fit)
# compare coefficients with the beta vector used to generate the parameters
cat(beta.vec)
cat(fit$coefficients)
# region 1
intercept1.estimated <- fit$coefficients[1]
coef1.estimated <- fit$coefficients[2]
# region 2
intercept2.estimated <- intercept1.estimated + fit$coefficients[3]
coef2.estimated <- coef1.estimated  + fit$coefficients[5]
#region 3
intercept3.estimated <- intercept1.estimated + fit$coefficients[5]
coef3.estimated <- coef1.estimated  + fit$coefficients[6]
cat("Slope Region 1: ", coef1.estimated)
cat("Slope Region 2: ", coef2.estimated)
cat("Slope Region 3: ", coef3.estimated)
# fit the ANCOVA model
fit = lm(density~resource*reg)
# show the design matrix
model.matrix(fit)
# show parameter estimates & their confidence intervals
summary(fit)
# compare coefficients with the beta vector used to generate the parameters
data <- data.frame(Region = c(1,1,1,2,2,2,3,3,3),
beta = beta.vec,
estimated = fit$coefficients)
# fit the ANCOVA model
fit = lm(density~resource*reg)
# show the design matrix
model.matrix(fit)
# show parameter estimates & their confidence intervals
summary(fit)
# compare coefficients with the beta vector used to generate the parameters
data <- data.frame(Region = c(1,1,2,2,3,3),
beta = beta.vec,
estimated = fit$coefficients)
data
# region 1
intercept1.estimated <- fit$coefficients[1]
coef1.estimated <- fit$coefficients[2]
# region 2
intercept2.estimated <- intercept1.estimated + fit$coefficients[3]
coef2.estimated <- coef1.estimated  + fit$coefficients[5]
#region 3
intercept3.estimated <- intercept1.estimated + fit$coefficients[5]
coef3.estimated <- coef1.estimated  + fit$coefficients[6]
cat("Slope Region 1: ", coef1.estimated)
cat("Slope Region 2: ", coef2.estimated)
cat("Slope Region 3: ", coef3.estimated)
# fit the ANCOVA model
fit = lm(density~resource*reg)
# show the design matrix
model.matrix(fit)
# show parameter estimates & their confidence intervals
summary(fit)
# compare coefficients with the beta vector used to generate the parameters
estimated <- c(fit$coefficients[1], fit$coefficients[3], fit$coefficients[4], fit$coefficients[2], fit$coefficients[5],fit$coefficients[6])
data <- data.frame(Region = c(1,1,2,2,3,3),
actual = beta.vec,
estimated = estimated)
data
# region 1
intercept1.estimated <- fit$coefficients[1]
coef1.estimated <- fit$coefficients[2]
# region 2
intercept2.estimated <- intercept1.estimated + fit$coefficients[3]
coef2.estimated <- coef1.estimated  + fit$coefficients[5]
#region 3
intercept3.estimated <- intercept1.estimated + fit$coefficients[5]
coef3.estimated <- coef1.estimated  + fit$coefficients[6]
cat("Slope Region 1: ", coef1.estimated)
cat("Slope Region 2: ", coef2.estimated)
cat("Slope Region 3: ", coef3.estimated)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
abline(coef1.estimated)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
abline(intercept1.estimated, coef1.estimated)
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
abline(intercept1.estimated, coef1.estimated)
abline(intercept2.estimated, coef2.estimated)
abline(intercept3.estimated, coef3.estimated)
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
abline(coef1.estimated, intercept1.estimated)
abline(intercept2.estimated, coef2.estimated)
abline(intercept3.estimated, coef3.estimated)
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
alpha <-intercept1.estimated
beta <- coef1.estimated
predicted <- alpha + beta*resource
lines(resource,predicted, col="red", lwd=4)
#abline(intercept1.estimated, coef1.estimated)
abline(intercept2.estimated, coef2.estimated)
abline(intercept3.estimated, coef3.estimated)
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
abline(intercept1.estimated, coef1.estimated)
abline(intercept2.estimated, coef2.estimated)
abline(intercept3.estimated, coef3.estimated)
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
abline(intercept1.estimated, coef1.estimated, col="red")
abline(intercept2.estimated, coef2.estimated, col="green")
abline(intercept3.estimated, coef3.estimated, col="blue")
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
# Refit the model with main effects only (no interaction between the resource and region).
fit2 = lm(density~resource+reg)
# Print the design matrix and interpret the results (use graphs).
model.matrix(fit2)
summary(fit2)
# compare coefficients with the beta vector used to generate the parameters
estimated <- c(fit$coefficients[1], fit$coefficients[3], fit$coefficients[4], fit$coefficients[2], fit$coefficients[5],fit$coefficients[6])
data <- data.frame(actual = beta.vec,
estimated = estimated)
print(data)
# region 1
intercept1.estimated <- fit$coefficients[1]
coef1.estimated <- fit$coefficients[2]
# region 2
intercept2.estimated <- intercept1.estimated + fit$coefficients[3]
coef2.estimated <- coef1.estimated  + fit$coefficients[5]
#region 3
intercept3.estimated <- intercept1.estimated + fit$coefficients[4]
coef3.estimated <- coef1.estimated + fit$coefficients[6]
cat("Slope Region 1: ", coef1.estimated)
cat("Slope Region 2: ", coef2.estimated)
cat("Slope Region 3: ", coef3.estimated)
# Examine the fit of the model to the data.
plot(resource ~ density,
pch=20,
col=(rep(c('red', "green", "blue"), each=n.populations)),
xlab="Resource Level",
ylab="Population Density",
main="Population density relative to resouce level")
legend("bottomright",c("Region 1", "Region 2", "Region 3"), col=c('red', "green", "blue"), pch=20)
set.seed(1)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
models <- list(null.model, no.interaction.model, interaction.model)
# non.cancer <- n-cancer.counts
# binom.prop <- cbind(cancer.counts, non.cancer)
# null.model <- glm(binom.prop ~ mass, data=df,binomial(link="logit"))
# no.interaction.model <- glm(binom.prop  ~ genA + genB + mass, data=df,binomial(link="logit"))
# interaction.model <- glm(binom.prop  ~ genA*genB + mass, data=df,binomial(link="logit"))
# summary(null.model)
# summary(no.interaction.model)
# summary(interaction.model)
null.model <- glm(cancer.counts ~ mass, data=df,binomial(link="logit"))
ggplot(aes(genotype ~ cancer.counts), data=df)
library(ggplot2)
ggplot(aes(genotype ~ cancer.counts), data=df)
set.seed(1)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
#Install packages if necessary
#install.packages("ggplot2")
#install.packages("GGally")
#install.packages("lme4")
#install.packages("AICcmodavg")
# Load packages
library(ggplot2) # for plotting
library(GGally) # for ggpairs function, pairwise plotting of multiple variables
library(lme4) # for GLMMs
library(AICcmodavg) # for AIC comparison
### Same random seed
set.seed(12345)
#### Number of Datapoints ####
# Assume a balanced design
# 2 genes - A and B
# number of cats looked at
n <- 1000
#### Data Simulation ####
# Specify a categorical variable which indicates genotype
genA <- factor(rep(rep(c(0,1), each=n/4),2)) # produces 00...11...00...11...
genB <- factor(rep(c(0,1), each=n/2)) # produces 0000...1111....
types <- c("WT", "A", "B", "AB")
genotype <- factor(rep(types, each=n/4))
# We also need a vector to indicate mass for each organism
# Assume this is a continuous variable between 7 and 15 pounds
mass <- round(runif(n, min=7, max=15), digits=2)
# Chose the values for the parameters (logit transformed)
# Labeled to make it easier to think about
# Each element in beta.vec.names indicates the effect of that variable or interaction of variables
beta.vec.names <- c("WT", "A", "B", "A:B", "mass")
beta.vec <- c(0, 0.02, 0.01, 0.04, 0.005) # we can freely edit these
names(beta.vec) <- beta.vec.names
#### Model Matrix Creation ####
# Build the design matrix of the interactive combination of genotype and mass
Xmat = model.matrix(~genA*genB + mass)
#### Create Stochastic Data ####
#Generate the linear predictor (mutliple Xmat by the beta.vec)
lin.pred =  Xmat[,]%*%beta.vec
#Transform the data with an inverse logit to get the expected proportion of cancerous samples
exp.p <- exp(lin.pred)/(1+exp(lin.pred))
# Add binomial noise
cancer.counts <- rbinom(n=n, size=1, prob=exp.p)
#### Combine Data ####
# Combine type data, mass data, and cancer counts
df <- data.frame(genA, genB, mass, genotype, cancer.counts)
df
#### Export ####
# Export the data to a csv file
#filename <- "cancer_data.csv"
#write.csv(df, file=filename, row.names = FALSE)
null.model <- glm(cancer.counts ~ mass, data=df,binomial(link="logit"))
no.interaction.model <- glm(cancer.counts  ~ genA + genB + mass, data=df,binomial(link="logit"))
interaction.model <- glm(cancer.counts  ~ genA*genB + mass, data=df,binomial(link="logit"))
summary(null.model)
summary(no.interaction.model)
summary(interaction.model)
models <- list(null.model, no.interaction.model, interaction.model)
model.names <- c("null", "additive", "interaction")
aictab(cand.set = models, modnames = model.names)
library(ggplot2)
ggplot(aes(genotype ~ cancer.counts), data=df)
install.packages("janitor")
set.seed(1)
library(knitr)
opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
cancer.table <- df %>%
group_by(genotype) %>%
count(cancer.counts) %>%
spread(cancer.counts, n) %>%
rename(none="0", cancer="1")
R.version.string
knitr::include_graphics("images/Avida_instructions_No-operation_Table.pdf")
knitr::include_graphics("images/Avida_instructions_Hardware_control_Table.pdf")
knitr::include_graphics("images/Avida_instructions_Math_Table.pdf")
knitr::include_graphics("images/Avida_instructions_Interaction_Table.pdf")
knitr::include_graphics("images/Avida_instructions_Biological_Table.pdf")
---
title: "Supplementary Material for Division of Labor Promotes the Entrenchment of Multicellularity"
knitr::include_graphics("images/Avida_instructions_No-operation_Table.pdf")
knitr::include_graphics("images/Avida_instructions_Hardware_control_Table.pdf")
file <- 'Avida_instructions_No-operation.csv'
data <- read.csv(file)
getwd()
ls
setwd(/Desktop/mt2/supplementary_material)
getwd()
setwd(/Users/kgskocelas/Desktop/mt2/supplementary_material)
setwd(Users/kgskocelas/Desktop/mt2/supplementary_material)
setwd(/Users/kgskocelas/Desktop/mt2/supplementary_material/)
list.files()
setwd(/Users/kgskocelas/Desktop)
setwd(Desktop)
setwd(/Desktop)
setwd(./Desktop/mt2/supplimental_material)
setwd("./Desktop/mt2/supplimental_material/CSV_files)
setwd("./Desktop/mt2/supplimental_material/CSV_files")
setwd("~/Desktop/mt2/supplementary_material/CSV_files")
list.files()
file <- 'Avida_instructions_No-operation.csv'
data <- read.csv(file)
data
View(data)
head(data[, 1:5], 10)
head(data[, 3:5], 10)
head(data[, 3,5], 10)
data_new <- data(,-c(0-2))
data_new <- data[,-c(0-2)]
data_new
data_new <- data[c(0-3), c(3)]
data_new
data_new <- data[, c(3)]
data_new
knitr::kable(
file <- 'Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- '/CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv'
# all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
# instructions <- data[, c(3)]
# descriptions <- data[, c5]
# needed_data <- rbind(instructions, descriptions)
# heat(needed_data), booktabs = TRUE,
# caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv'
all-data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv'
all-data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv'
all-data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv',
all-data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
# instructions <- data[, c(3)]
# descriptions <- data[, c5]
# needed_data <- rbind(instructions, descriptions)
# heat(needed_data), booktabs = TRUE,
# caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
knitr::kable(
file <- 'CSV_files/Avida-instructions-No-operation.csv',
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
# instructions <- data[, c(3)]
# descriptions <- data[, c5]
# needed_data <- rbind(instructions, descriptions)
# heat(needed_data), booktabs = TRUE,
# caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
instructions <- data[, c(3)]
descriptions <- data[, c5]
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
instructions <- data[, c(3)]
descriptions <- data[, c(5)]
needed_data <- rbind(instructions, descriptions)
knitr::kable(
head(needed_data), booktabs = TRUE,
caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
clear
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
all_data
instructions <- data[, c(3)]
descriptions <- data[, c(5)]
needed_data <- rbind(instructions, descriptions)
knitr::kable(
head(needed_data), booktabs = TRUE,
caption = 'No-operation instructions. Instructions used in this study that have no direct effects when executed.'
)
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
# instructions <- data[, c(3)]
# descriptions <- data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
#
# knitr::kable(
#   head(needed_data), booktabs = TRUE,
#   caption = 'No-operation instructions. Instructions used in this study that have no direct effects when executed.'
)
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
# instructions <- data[, c(3)]
# descriptions <- data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
#
# knitr::kable(
#   head(needed_data), booktabs = TRUE,
#   caption = 'No-operation instructions. Instructions used in this study that have no direct effects when executed.'
# )
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
# instructions <- data[, c(3)]
# descriptions <- data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
#
# knitr::kable(
#   head(needed_data), booktabs = TRUE,
#   caption = 'No-operation instructions. Instructions used in this study that have no direct effects when executed.'
# )
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
all_data
# instructions <- data[, c(3)]
# descriptions <- data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
#
# knitr::kable(
#   head(needed_data), booktabs = TRUE,
#   caption = 'No-operation instructions. Instructions used in this study that have no direct effects when executed.'
# )
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
instructions <- data[, c(3)]
instructions
# descriptions <- data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
#
# knitr::kable(
#   head(needed_data), booktabs = TRUE,
#   caption = 'No-operation instructions. Instructions used in this study that have no direct effects when executed.'
# )
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
instructions <- all_data[, c(3)]
instructions
# descriptions <- data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
#
# knitr::kable(
#   head(needed_data), booktabs = TRUE,
#   caption = 'No-operation instructions. Instructions used in this study that have no direct effects when executed.'
# )
# set up data frame
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
instructions <- all_data[, c(3)]
descriptions <- all_data[, c(5)]
needed_data <- rbind(instructions, descriptions)
# make bookdown table
knitr::kable(
head(all_data), booktabs = TRUE,
caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
# set up data frame
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, header=TRUE, stringsAsFactors=FALSE)
instructions <- all_data[, c(3)]
descriptions <- all_data[, c(5)]
needed_data <- rbind(instructions, descriptions)
# make bookdown table
knitr::kable(
head(all_data), booktabs = TRUE,
caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
# set up data frame
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, stringsAsFactors=FALSE)
# instructions <- all_data[, c(3)]
# descriptions <- all_data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
# make bookdown table
knitr::kable(
head(all_data), booktabs = TRUE,
caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
View(all_data)
# set up data frame
file <- 'CSV_files/Avida_instructions_No-operation.csv'
all_data <- read.csv(file, stringsAsFactors=FALSE)
# instructions <- all_data[, c(3)]
# descriptions <- all_data[, c(5)]
# needed_data <- rbind(instructions, descriptions)
# make bookdown table
knitr::kable(
head(all_data), booktabs = TRUE,
caption = '**No-operation instructions.** Instructions used in this study that have no direct effects when executed.'
)
library(kableExtra)
install.packages("kableExtra")
