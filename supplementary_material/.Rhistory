###-------------------------------------------------------
# MAKING SANKEY DIAGRAMS
# Re-name all_reversion_mutations before modifying
sankey <- case_study_data
# Add color vector to AVIDA instructions for plotting mutation identity in the sankey diagrams
AVIDA_instructions$color <- viridis(n=38, option="D")
# This normally loops through all 65 strategy_reps but here the for loop is obviously unecessary
for (i in unique(sankey$strategy_rep)) {
# Get transition data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==0,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for transition timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_trans = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_trans,
nodeWidth=80,
fontSize=15,
nodePadding=8,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1500) %>%
saveNetwork(file = paste(i,'trans_reversion_mutations_sankey_plot.html'))
# Get final data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==1,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for final timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_final = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_final,
nodeWidth=80,
fontSize=15,
nodePadding=8,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1500) %>%
saveNetwork(file = paste(i,'final_reversion_mutations_sankey_plot.html'))
}
saveNetwork(file = paste(i,'final_reversion_mutations_sankey_plot.html'))
# Code to generate example sankey plots
# 27 Novemeber 2021
# Peter Conlin
# If this is the first time you are running this code, uncomment the next to lines to install the required libraries
# dependencies <- c("viridis", "tidyverse", "networkD3", "htmlwidgets")
# install.packages(setdiff(dependencies, rownames(installed.packages())))
# Load necessary libraries
library(viridis)
library(tidyverse)
library(networkD3)
library(htmlwidgets)
# Set working directory
# If you have all of the files in a single unzipped folder, you can use setwd() to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works if running in RStudio
# Read in case study data and list of AVIDA instructions
case_study_data <- read.csv("CSV_files/3416_data_for_sankey_plot_example_27NOV21.csv", header=T, stringsAsFactors=F)
AVIDA_instructions <- read.csv("CSV_files/Avida_instructions.csv", header=T, stringsAsFactors=F)
###-------------------------------------------------------
# MAKING SANKEY DIAGRAMS
# Re-name all_reversion_mutations before modifying
sankey <- case_study_data
# Add color vector to AVIDA instructions for plotting mutation identity in the sankey diagrams
AVIDA_instructions$color <- viridis(n=38, option="D")
# This normally loops through all 65 strategy_reps but here the for loop is obviously unecessary
for (i in unique(sankey$strategy_rep)) {
# Get transition data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==0,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for transition timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_trans = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_trans,
nodeWidth=80,
fontSize=15,
nodePadding=8,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1500) # %>%
# saveNetwork(file = paste(i,'trans_reversion_mutations_sankey_plot.html'))
# Get final data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==1,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for final timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_final = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(outputId = "sankeyPlot",
Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_final,
nodeWidth=80,
fontSize=15,
nodePadding=0,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1000) #%>%
saveNetwork(file = paste(i,'final_reversion_mutations_sankey_plot.html'))
}
source("~/Desktop/mt2/supplementary_material/sankey_plot_code_example_27NOV21.R", echo=TRUE)
# Code to generate example sankey plots
# 27 Novemeber 2021
# Peter Conlin
# If this is the first time you are running this code, uncomment the next to lines to install the required libraries
dependencies <- c("viridis", "tidyverse", "networkD3", "htmlwidgets")
install.packages(setdiff(dependencies, rownames(installed.packages())))
# Load necessary libraries
library(viridis)
library(tidyverse)
library(networkD3)
library(htmlwidgets)
# Set working directory
# If you have all of the files in a single unzipped folder, you can use setwd() to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works if running in RStudio
# Read in case study data and list of AVIDA instructions
case_study_data <- read.csv("CSV_files/3416_data_for_sankey_plot_example_27NOV21.csv", header=T, stringsAsFactors=F)
AVIDA_instructions <- read.csv("CSV_files/Avida_instructions.csv", header=T, stringsAsFactors=F)
###-------------------------------------------------------
# MAKING SANKEY DIAGRAMS
# Re-name all_reversion_mutations before modifying
sankey <- case_study_data
# Add color vector to AVIDA instructions for plotting mutation identity in the sankey diagrams
AVIDA_instructions$color <- viridis(n=38, option="D")
# This normally loops through all 65 strategy_reps but here the for loop is obviously unecessary
for (i in unique(sankey$strategy_rep)) {
# Get transition data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==0,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for transition timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_trans = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_trans,
nodeWidth=80,
fontSize=15,
nodePadding=8,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1500) # %>%
# saveNetwork(file = paste(i,'trans_reversion_mutations_sankey_plot.html'))
# Get final data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==1,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for final timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_final = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_final,
nodeWidth=80,
fontSize=15,
nodePadding=0,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1000) #%>%
saveNetwork(file = paste(i,'final_reversion_mutations_sankey_plot.html'))
}
# Code to generate example sankey plots
# 27 Novemeber 2021
# Peter Conlin
# If this is the first time you are running this code, uncomment the next to lines to install the required libraries
# dependencies <- c("viridis", "tidyverse", "networkD3", "htmlwidgets")
# install.packages(setdiff(dependencies, rownames(installed.packages())))
# Load necessary libraries
library(viridis)
library(tidyverse)
library(networkD3)
library(htmlwidgets)
# Set working directory
# If you have all of the files in a single unzipped folder, you can use setwd() to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works if running in RStudio
# Read in case study data and list of AVIDA instructions
case_study_data <- read.csv("CSV_files/3416_data_for_sankey_plot_example_27NOV21.csv", header=T, stringsAsFactors=F)
AVIDA_instructions <- read.csv("CSV_files/Avida_instructions.csv", header=T, stringsAsFactors=F)
###-------------------------------------------------------
# MAKING SANKEY DIAGRAMS
# Re-name all_reversion_mutations before modifying
sankey <- case_study_data
# Add color vector to AVIDA instructions for plotting mutation identity in the sankey diagrams
AVIDA_instructions$color <- viridis(n=38, option="D")
# This normally loops through all 65 strategy_reps but here the for loop is obviously unecessary
for (i in unique(sankey$strategy_rep)) {
# Get transition data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==0,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for transition timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_trans = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_trans,
nodeWidth=80,
fontSize=15,
nodePadding=8,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1500) # %>%saveNetwork(file = paste(i,'trans_reversion_mutations_sankey_plot.html'))
# Get final data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==1,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for final timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_final = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_final,
nodeWidth=80,
fontSize=15,
nodePadding=0,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1000) %>%
saveNetwork(file = paste(i,'final_reversion_mutations_sankey_plot.html'))
}
# Code to generate example sankey plots
# 27 Novemeber 2021
# Peter Conlin
# If this is the first time you are running this code, uncomment the next to lines to install the required libraries
# dependencies <- c("viridis", "tidyverse", "networkD3", "htmlwidgets")
# install.packages(setdiff(dependencies, rownames(installed.packages())))
# Load necessary libraries
library(viridis)
library(tidyverse)
library(networkD3)
library(htmlwidgets)
# Set working directory
# If you have all of the files in a single unzipped folder, you can use setwd() to source file location
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #works if running in RStudio
# Read in case study data and list of AVIDA instructions
case_study_data <- read.csv("CSV_files/3416_data_for_sankey_plot_example_27NOV21.csv", header=T, stringsAsFactors=F)
AVIDA_instructions <- read.csv("CSV_files/Avida_instructions.csv", header=T, stringsAsFactors=F)
###-------------------------------------------------------
# MAKING SANKEY DIAGRAMS
# Re-name all_reversion_mutations before modifying
sankey <- case_study_data
# Add color vector to AVIDA instructions for plotting mutation identity in the sankey diagrams
AVIDA_instructions$color <- viridis(n=38, option="D")
# This normally loops through all 65 strategy_reps but here the for loop is obviously unecessary
for (i in unique(sankey$strategy_rep)) {
# Get transition data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==0,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for transition timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_trans = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_trans,
nodeWidth=80,
fontSize=15,
nodePadding=8,
iterations = 0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1500) # %>%saveNetwork(file = paste(i,'trans_reversion_mutations_sankey_plot.html'))
# Get final data
data <- sankey[sankey$strategy_rep==i & sankey$timepoint==1,]
data <- cbind.data.frame(data, value=rep(1, length(data$strategy_rep)))
data_nodes <- cbind.data.frame(name=c(unique(data$wt_ID), unique(data$mut_op)), empty=rep(NA,length(unique(data$wt_ID)) + length(unique(data$mut_op))))
data$IDsource=match(data$mut_op, data_nodes$name)-1
data$IDtarget=match(data$wt_ID, data_nodes$name)-1
# prepare D3 colour scale for final timepoint
op_colors <- c()
for (j in data_nodes$name) {
if (j %in% data$wt_ID) {
temp <- unique(data$wt_ID[data$wt_ID==j])
temp <- unique(data$wt_op[data$wt_ID==temp])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
else if (j %in% data$mut_op) {
temp <- unique(data$mut_op[data$mut_op==j])
op_colors[length(op_colors)+1] <- AVIDA_instructions$color[AVIDA_instructions$operation==temp]
}
Color_scale_final = paste('d3.scaleOrdinal() .domain([',
gsub("^c\\(|\\)$", "", toString(paste(list(data_nodes$name), sep=""))),
']) .range([',
gsub("^c\\(|\\)$", "", toString(list(op_colors))),
'])', sep="")
# Make the Network
sankeyNetwork(Links = data,
Nodes = data_nodes,
Source = "IDsource",
Target = "IDtarget",
Value = "value",
NodeID = "name",
sinksRight=FALSE,
colourScale=Color_scale_final,
nodeWidth=80,
fontSize=15,
nodePadding=8,
iterations =0,
height = 20*max(c(length(unique(data$mut_op)), length(unique(data$wt_ID)))),
width = 1000) %>%
saveNetwork(file = paste(i,'final_reversion_mutations_sankey_plot.html'))
}
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='kgskocelas',
token='8467050C6F68735C58BBE4639B5EF306',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kgskocelas',
token='8467050C6F68735C58BBE4639B5EF306',
secret='dv6nEOlkn3hc6XUyPEHB1BPVX88jBPDLwq0olBpq')
